#include "msp430.h"
//定义不同音调的频率以及拍子的延时长度
#define aa 0x5000
#define ab 0x1900
#define a 0xa000
#define b 0xf000
#define f 0xffff
#define aaa 0x2300
#define aab 0x1900
#define gaa 0x471c
#define gab 0x238e
#define ga 0x8e39
#define gb 0x6aaa
#define gf 0xd556
#define baa 0x6aaa
#define ab 0x1900
#define ba 0xd555
#define bb 0xffff
#define l2 294
#define l4h 367
#define l5 391
#define l5h 415
#define l6 440
#define l6h 466
#define l7 494
#define m1 523
#define m2l 554
#define m2 587
#define m2h 622
#define m3 659
#define m4 698
#define m4h 740
#define m5 784
#define m5h 831
#define m6 880
#define m6h 932
#define m7 988
#define h1 1046
#define h2l 1108
#define h2 1174
#define h2h 1244
#define h3 1318
#define h4 1397
#define h4h 1479
#define h5 1568
#define h5h 1661
#define h6 1760
#define h7 1976
const char string[63] = "Welcome!\r\nType in 1 for Piano Mode\r\nType in 2 for Song Mode\r\n\0";                                            //开机欢迎界面信息
const char string1[63] = "Invalid Input!\r\nPlease enter again\r\n\0";                                                                                            //输入错误信息
const char pianomsg[93] = "\r\n                        **\\\\Piano Mode//**\r\n\r\n\To switch to Song Mode, please enter s\r\n\0";    //弹奏模式界面信息
const char message2[193] = "\r\n                       **\\\\Song Mode//**\r\n\r\n\Please enter the corresponding song no. you wish to play: \r\n1-Aladin\r\n2-Bright Days\r\n3-Gold Wind\r\n\r\nTo switch to Piano Mode, please enter p\r\n\0";  //播放模式界面信息
const char songname1[67] = "\r\nPlaying: A Whole New World\r\nReturn to Song Mode at anytime by entering s\r\n\0";            //正在播放"A Whole New World" 信息
const char songname2[72] = "\r\nPlaying: Bright Days\r\nReturn to Song Mode at anytime by entering s\r\n\0";    //正在播放"闪亮的日子" 信息   
const char songname3[70] = "\r\nPlaying: il vento d'oro\r\nReturn to Song Mode at anytime by entering s\r\n\0";     //正在播放"il vento d'oro" 信息
//曲目段落的音调、拍子、灯效排序
const int playnote[7] = { m1,m2,m3,m4,m5,m6,m7 };
const unsigned int kk[20] = { m4h,m2,m2,m3,m4,m3,m2,m2l,m2,m3,m4h,m7,l7,m2l,m2,m3,m2,m2l,m6,m5 };
const unsigned int k1[8] = { m7,h2l,h2,m5,m4h,m4,h2,h3 };
const unsigned int gg[36] = { l7,l7,l7,l6,l7,m2,l7,l4h,l6,l7,l7,l7,l6,l7,m4,m3,m2,l6 };
const unsigned int tt[20] = { ga,200,gab,gab,gb,gb,gaa,gb,gb,gaa,ga,200,gab,gab,gb,gb,gaa,gb,gb,gaa };
const unsigned int p0[] = { 3,3,2,1,5,4,2,1,4,5,3,3,2,1,5,4,2,1,4,5 };
const unsigned int k2[25] = { m7,h2l,h2,h3,h4h,m7,h2,h6,h5h,h4h,h3,h4h,m7,h2l,h2,h3,h4h,m7,h2,h6,h5h,h6,h7,h5h,h4h };
const unsigned int k3[25] = { m7,h2l,h2,h3,m7,m7,h2,h6,m7,m7,m7,m7,m7,h2l,h2,h3,m7,m7,h2,h6,m7,m7,m7,m7,m7 };
const unsigned int tt2[25] = { aab,aab,aab,aab,250,gaa,gaa,gaa,250,ga,gaa,400,aab,aab,aab,aab,250,gaa,gaa,gaa,gf,gf,ga,ga,400 };
const unsigned int k4[12] = { m2,m2l,l7,l6,l7,l7,l4h,l6,l7,m2l,l6,l7 };
const unsigned int k5[12] = { m2,m2l,l7,l2,l2,l2,l4h,l6,l7,m2l,l6,l7 };
const unsigned int tt3[12] = { gab,gab,gaa,gb,gb,gb,gaa,gaa,gaa,gb,gb,gb };
const unsigned int k6[19] = { l6,m2,m4h,m3,m2h,l7,m6,m5h,m4h,m2,m2l,l7,l6,l7,l6,l7,l6,l7,l6 };
const unsigned int p1[25] = { 1,2,4,5,3,5,4,2,1,2,1,0,1,2,4,5,3,5,4,2,1,2,2,1,0 };
const unsigned int p2[12] = { 1,2,5,3,3,3,4,5,2,3,3,3 };
const unsigned int p3[19] = { 1,2,5,4,1,2,5,4,1,2,4,2,5,2,5,2,5,2,5 };
const int kt[26] = { m6,h4h,m5,m4h,m6,h4h,m5,m4h,m6,m4h,m3 };
const int g[29] = { m4h,m3,m5,m4h,m2,l6,m4h,m3,m5,m4h,m2,m4h,m3,m3,m2h,m4h,m3,m2l,m3,m2,m2l,m2,l7,m2l,m3,m2,l6,l6,m2 };
const int t[26] = { aa,a,a,5,aa,a,a,5,2,a,a };
const int t2[29] = { a,aa,a,aa,a,4,a,aa,a,aa,a,2,2,a,aa,a,aa,a,a,a,a,a,aa,a,a,a,b,aa,2 };
const int p[30] = { m4h,m5,m7,m6,m4h,m4h,m5,m7,m6,m3,m5,m4h,m4h,m4h,m5,m6,h2l,m7,m6,m2,h2l,m7,m6,m2,m4h,m3,m2,l7,m2,m3 };
const int l[30] = { m2,m3,m5,m6,m2,m2,m3,m5,m6,m3,l6,l6,l6,m2,m5,m6,m6,m5,m2,m2,m6,m5,m2,m2,m2,m2,l6,l6,l5h,l5 };
const int t3[30] = { aa,a,a,4,b,aa,a,a,aa,a,a,aa,3,a,a,a,a,a,b,aa,a,a,b,aa,aa,a,a,aa,a,b };
const int u[12] = { h2,m6,m2,m4h,m3,m2,m3,m5,m4h,m2,m2l,m2 };
const int t4[12] = { a,b,aa,a,a,a,a,a,a,a,a,8 };
const int on[5]={h3,h2,m3,m5,h1};
const int r[12] = { m7,m2,m2,m2,l6,l6,l5h,m3,m4h,l5,l5,m2 };
const int v[29] = { l6,l5,l7,l6,l5,l4h,l6,l5,l7,m4h,m2,l5,l6,l7,l7,l6h,m3,m2l,m2l,l7,l6,l7,l5,l5,l5,l5,l4h,l4h,l4h };
const int v1[21] = { l6,m6,m2,m4,m6,m5,l6,m4,m2,m3,m4,m3,l6,m6,m2,m4,m6,m5,m1,m3,m5 };
const int v2[34] = { m4,m2,m3,m4,m3,l6,l6,m6,m5,m4,m5,m6,h2,m6,m5,m4,m5,m6,m4,m5,m5,m6,m2,m2,m4,m4,m5,m3,l6,l6,m6,m5,m4,m5 };
const int v3[53] = { m6,h2,m6,m5,m4,m5,m6,m4,m5,m5,m6,m2,m1,m2,m4,m3,m2,m2,m2,m2,h2,h1,m7,h1,h2,h4,h3,h2,h1,h2,m6,m4,m4,m5,m5,m6,m5,m4,m5,m6,m6,m7,m6 };
const int vt3[53] = { 2,ba,bb,baa,baa,baa,2,ba,ba,bb,baa,2,ba,bb,baa,baa,baa, 2,baa,baa,bb,baa,baa,baa,2,ba,bb,baa,baa,baa,2,baa,baa,ba,bb,baa,2,baa,baa,ba,bb,baa,2 };
const int vt[21] = { ba,bb,baa,baa,baa,2,ba,bb,baa,baa,baa,2,ba,bb,baa,baa,baa,bb,baa,baa,baa };
const int vt2[34] = { bb,baa,baa,baa,2,baa,baa,bb,baa,baa,baa,2,ba,bb,baa,baa,baa,2,ba,ba,bb,baa,2,ba,ba,bb,baa,2,baa,baa,bb,baa,baa,baa };
const int o0[27]={3,5,4,2,1,0,3,2,1,5,4,5,4,1,1,2,1,5,4,1,1,0,1,4,2,1,1};
const int o1[]={1,1,2,3,1,2,5,4,0,2,0,1,1,1,2,3,3,3,3,0,3,2,1,0,4,5,2,0,1,1};
const int o2[]={3,3,2,1,0,4,5,3,2,1,2,3};
const int o3[]={gab,gab,0x7500,0x7500,b};
const int o4[]={1,2,4,5,3};
const int o5[]={5,2,1,4,1,4,2,5,4,1,4,1,5,2,1,4,1,4,1,4,2};
const int o6[]={5,4,1,5,2,1,1,2,1,4,1,5,3,5,4,1,4,5,1,4,4,5,4,4,1,1,2,1,4,4,5,4,1,4};
const int o7[]={2,3,2,1,4,1,5,4,1,1,2,4,4,5,5,4,1,1,1,1,3,5,4,5,3,3,2,2,1,2,1,4,4,5,5,1,1,1,2,2,2,2,1};
const int o8[]={1,4,2,5,3,1};
char buffer[1];
void brightdays();
void song();
void delay(unsigned int i);
void delay1(unsigned int i);
void initializebutton();
void UARTA0_init();
void songinit();
void songmessage();
void pianomessage();
void piano();
void goldwind();
void aladin();
void msg();
void light(unsigned int i, unsigned int j);
void play(int note, int o);
void playsong();
void initout();
void main() {
    int y[2],i,e;
    songinit();               //播放引脚初始化
    for(i=0;i<5;i++){
        y[0]=32768/on[i];
        y[1]=0;
        for(e=0;e<2;e++){
            playsong(2*y[e],0,1);     //播放开机音乐
            if(y[e]!=0){
                light(o4[i],1);       //输出开机灯效
                delay(o3[i]);
            }
            else{
                light(0,0);
                delay(gab/2);
            }
        }
    }
    UARTA0_init();                //串行通信引脚初始化
    unsigned int j = 0;
    while (string[j] != '\0')
    {
        while ((IFG2 & UCA0TXIFG) == 0);
        UCA0TXBUF = string[j];      //输出开机欢迎界面信息
        j++;
    }
       start: while ((IFG2 & UCA0RXIFG) == 0);
        buffer[0] = UCA0RXBUF;      //接收串口输入
    if (buffer[0] == '1') {
        piano();                    //进入弹奏模块函数
    }
    else if (buffer[0] == '2') {
        song();                     //进入播放模块函数
    }
    else{                          //当串口输入不为1或2
        j=0;
        while (string1[j] != '\0')
            {
                while ((IFG2 & UCA0TXIFG) == 0);
                UCA0TXBUF = string1[j];       //输出输入报错信息
                j++;
            }
        goto start;                           //返回到重新输入部分
    }
};
void playsong(unsigned int i, unsigned int j, unsigned int k) {
    if (k == 1) {
        TA1CTL |= TASSEL0;     //选择 ACLK 为 TA1 时钟
        TA1CCR0 = i-1;         //设定 PWM 周期
        TA1CCTL1 |= OUTMOD1;   //设定输出模式
        TA1CCR1 = i / 10;      //设置占空比为90%的方波
        TA1CTL |= TACLR + MC0;  //reset counting
    }
    else if (k == 2){
        TA1CTL |= TASSEL0;  //选择 ACLK 为 TA1 c时钟
        TA0CTL |= TASSEL0;  //选择 ACLK 为 TA0 c时钟
        TA1CCR0 = i-1;      //设定 PWM 周期
        TA0CCR0 = j-1;      //设定 PWM 周期
        TA1CCTL1 |= OUTMOD1; //设定输出模式
        TA1CCR1 = i / 10;      //设置占空比为90%的方波
        TA1CTL |= TACLR + MC0;    //reset counting
        TA0CCTL1 |= OUTMOD1;     //设定输出模式
        TA0CCR1 = j / 10;;      //设置占空比为90%的方波
        TA0CTL |= TACLR + MC0;  //reset counting
    }
}
void delay(unsigned int i) {
    unsigned int j, k;
    if (i == 200 || i == 400 || i == 250) {                      //设定“A Whole New World”延时时长大于四分音符的音符延时
        for (k = 0;k < i / 50;k++) {
            for (j = 0;j < 0x471c;j++);
        }
    }
    if (i == 4 || i == 2 || i == 3 || i == 5 || i == 8) {     //设定“il vento d'oro”延时时长大于四分音符的音符延时
        for (k = 0;k < i;k++) {
            for (j = 0;j < 0xa000;j++);
        }
    }
    else {
        for (j = 0;j < i;j++);                                      //按输入预定值进行音符延时
    }

}
void delay1(unsigned int i) {        //设定“闪亮的日子”延时时长大于四分音符的音符延时
    unsigned int j, k;
    if (i == 2) {
        for (k = 0;k < i;k++) {
            for (j = 0;j < 0xd555;j++);
        }
    }
    else if (i == bb) {
        for (j = 0;j < i;j++);
        for (j = 0;j < 0x4000;j++);
    }
    else {
        for (j = 0;j < i;j++);
    }

}
void initializebutton() {
    WDTCTL = WDTPW + WDTHOLD;
    P1SEL &= ~(BIT0 + BIT3 + BIT4 + BIT5 + BIT7);
    P1SEL2 &= ~(BIT0 + BIT3 + BIT4 + BIT5 + BIT7);
    P1OUT |= (BIT0 + BIT3 + BIT4 + BIT5 + BIT7);
    P1REN |= (BIT0 + BIT3 + BIT4 + BIT5 + BIT7);
    P1DIR &= ~(BIT0 + BIT3 + BIT4 + BIT5 + BIT7);
    P2SEL &= ~(BIT0 + BIT2 + BIT3 + BIT4);
    P2SEL2 &= ~(BIT0 + BIT2 + BIT3 + BIT4);
    P2OUT |= (BIT0 + BIT2 + BIT3 + BIT4);
    P2REN |= (BIT0 + BIT2 + BIT3 + BIT4);
    P2DIR &= ~(BIT0 + BIT2 + BIT3 + BIT4);
    P2SEL |= BIT1;
    P2SEL2 &= ~BIT1;
    P2DIR |= BIT1;
}
void UARTA0_init() {    //定义串行及中断引脚和端口
    UCA0CTL1 |= UCSWRST;
    P1SEL |= BIT1 + BIT2;
    P1SEL2 |= BIT1 + BIT2;
    UCA0CTL1 |= UCSSEL0 + UCRXEIE;
    UCA0BR0 = 3;
    UCA0BR1 = 0;
    UCA0MCTL = UCBRF_0 + UCBRS_3;
    UCA0CTL1 &= ~UCSWRST;
    IE2 |= UCA0RXIE;
    _DINT();
}
void songinit() {
    WDTCTL = WDTPW + WDTHOLD;
    P2SEL |= BIT1;
    P2SEL2 &= ~BIT1;
    P2DIR |= (BIT0 + BIT1 + BIT2 + BIT3 + BIT5);
    P2REN = 0x00;
    P1REN = 0x00;
    P1SEL |= BIT6;
    P1SEL2 &= ~BIT6;
    P1DIR |= (BIT0 + BIT3 + BIT4 + BIT5 + BIT6);
    P2OUT |= (BIT0 + BIT2 + BIT3 + BIT5);
    P1OUT |= (BIT0 + BIT3 + BIT4 + BIT5);
}
void msg() {     
    unsigned int j = 0;
    if (buffer[0] == '1') {
        while (songname1[j] != '\0')
        {
            while ((IFG2 & UCA0TXIFG) == 0);
            UCA0TXBUF = songname1[j];        //输出播放歌曲“A Whole New World”名字
            j++;
        };
    }
    else if (buffer[0] == '2') {
        while (songname2[j] != '\0')
        {
            while ((IFG2 & UCA0TXIFG) == 0);
            UCA0TXBUF = songname2[j];      //输出播放歌曲“闪亮的日子”名字
            j++;
        };
    }
    else if (buffer[0] == '3') {
        while (songname3[j] != '\0')
        {
            while ((IFG2 & UCA0TXIFG) == 0);
            UCA0TXBUF = songname3[j];    //输出播放歌曲“il vento d'oro”名字
            j++;
        };
    }
}
void songmessage() {
    unsigned int j = 0;
    while (message2[j] != '\0')
    {
        while ((IFG2 & UCA0TXIFG) == 0);
        UCA0TXBUF = message2[j];           //输出播放模式界面信息
        j++;
    };                          
}
void pianomessage() {
    unsigned int j = 0;
    while (pianomsg[j] != '\0')
    {
        while ((IFG2 & UCA0TXIFG) == 0);
        UCA0TXBUF = pianomsg[j];         //输出弹奏模式界面信息
        j++;
    };
}
void play(int note, int o) {
    int y, z;
    if (o == 2) {            //将音符频率设作低八度
        y = 32768 / (playnote[note - 1] / 2);
    }
    else if (o == 3) {      //将音符频率设作高八度
        y = 32768 / (2 * playnote[note - 1]);
    }
    else {
        y = 32768 / playnote[note - 1];   //正常设置音符频率
    }
    //输出音符
    TA1CTL |= TASSEL0;
    TA1CCR0 = y-1;
    TA1CCTL1 |= OUTMOD1;
    TA1CCR1 = y/10;
    TA1CTL |= TACLR + MC0;
    delay(0xa000);         //延时
    //输出空波
    TA1CTL |= TASSEL0;
    TA1CCR0 = 0;
    TA1CCTL1 |= OUTMOD1;
    TA1CCR1 = 0;
    TA1CTL |= TACLR + MC0;
    //关闭LED
    P2OUT |= (BIT0 + BIT2 + BIT3 + BIT4 + BIT5);
    P1OUT |= (BIT0 + BIT4 + BIT5);        
}
void song() {
    int j=0,i,e;
    songinit();          //初始化播放引脚
    songmessage();
    _DINT();      //关闭总中断
    songstart: while ((IFG2 & UCA0RXIFG) == 0);
        buffer[0] = UCA0RXBUF;  //接收输入
    if (buffer[0] == '1') {
        msg();                 //输出歌曲1歌名
        light(1,1);            //输出歌曲播放显示灯效
        delay(2);
        light(0,0);            //关闭LED
        delay(2);
        _EINT();               //允许总中断
        aladin();              //播放曲目
    }
    else if (buffer[0] == '2') {
        msg();              //输出歌曲2歌名
        light(2,1);         //输出歌曲播放显示灯效
        delay(2);
        light(0,0);         //关闭LED
        delay(2);
        _EINT();            //允许总中断
        brightdays();       //播放曲目
    }
    else if (buffer[0] == '3') {
        msg();                  //输出歌曲3歌名
        for(e=0;e<2;e++){      
        for(i=0;i<6;i++){
          light(o8[i],1);       //输出歌曲播放显示灯效
          delay(gab);
          light(0,0);           //关闭LED
          delay(gab/2);
        }
        }
        delay(2);
        _EINT();          //允许总中断
        goldwind();     //播放曲目
    }
    else if(buffer[0]=='p'){   
        piano();          //进入弹奏模块
    }
    else{                 //其他输入
                while (string1[j] != '\0')
                    {
                        while ((IFG2 & UCA0TXIFG) == 0);
                        UCA0TXBUF = string1[j];     //输出报错信息
                        j++;
                    }
                goto songstart;            //返回重新输入
    }
}
void piano() {
    unsigned int o;
    initializebutton();         //初始化按键引脚
    pianomessage();          //输出弹奏界面信息
    _EINT();                       //允许总中断
    while(1){
    if ((P1IN & BIT7) == 0) {     //当按下K8
        o = 2;
    }
    else if ((P2IN & BIT4) == BIT4) {     //当按下S2
        o = 3;
    }
    else {
        o = 1;
    }
    if ((P1IN & BIT0) == 0) {                //当按下K1
        play(1, o);
    }
    else if ((P2IN & BIT0) == 0) {          //当按下K2
        play(2, o);
    }
    else if ((P2IN & BIT2) == 0) {           //当按下K3
        play(3, o);
    }
    else if ((P1IN & BIT3) == 0) {          //当按下K4
        play(4, o);
    }
    else if ((P1IN & BIT4) == 0) {           //当按下K5
        play(5, o);
    }
    else if ((P1IN & BIT5) == 0) {           //当按下K6
        play(6, o);
    }
    else if ((P2IN & BIT3) == 0) {           //当按下K7
        play(7, o);
    }
    }
}
void aladin() {                                               //曲目1播放函数
    int i, d, e, M, y[2], x[2];
    for (i = 0;i < 11;i++) {
        y[0] = 32768 / kt[i];                          
        y[1] = 0;                                              //每一个音符后输出一个空波
        for (e = 0;e < 2;e++) {
            playsong(y[e], x[e], 1);
            if ((i <= 2 || (i >= 4 && i <= 6)) && y[e] != 0) {
                light(1, 0);
            }
            else if ((i == 3 || (i == 7)) && y[e] != 0) {
                light(2, 0);
            }
            if (y[e] == 0) {
                P2OUT |= (BIT0 + BIT2 + BIT3 + BIT5);
                P1OUT |= (BIT0 + BIT3 + BIT4 + BIT5);
                delay(ab);
            }
            else {
                delay(t[i]);
            }
        }
    }

    for (d = 0;d < 2;d++) {
        for (i = 0;i < 29;i++) {
            if (i == 26 && d == 1) {
                y[0] = 32768 / m4h;
                x[0] = 32768 / m2;
                y[1] = 0;
                x[1] = 0;
            }
            else if (d == 0)
            {
                y[0] = 32768 / g[i];
                y[1] = 0;
            }
            else {
                y[0] = 32768 / g[i];
                x[0] = 32768 / v[i];
                y[1] = 0;
                x[1] = 0;
            }
            for (e = 0;e < 2;e++) {
                playsong(y[e], x[e], d+1);
                if (d == 0) {
                    light(0, 0);
                }
                else if ((i == 25 || i == 26) && y[e] != 0 && d == 1) {
                    light(o0[i], 1);
                }
                else if (y[e] != 0 && d == 1) {
                    light(o0[i], 0);
                }
                if (i == 26 && d == 1 && e == 0) {
                    delay(2);
                }
                else if (y[e] == 0) {
                    P2OUT |= (BIT0 + BIT2 + BIT3 + BIT5);
                    P1OUT |= (BIT0 + BIT3 + BIT4 + BIT5);
                    delay(ab);

                }
                else {
                    delay(t2[i]);
                }
            }
            if (i == 26 && d == 1) {
                break;
            }

        }
    }
    for (d = 0;d < 2;d++) {
        for (i = 0;i < 30;i++) {
            y[0] = 32768 / p[i];
            x[0] = 32768 / l[i];
            y[1] = 0;
            x[1] = 0;
            for (e = 0;e < 2;e++) {
                playsong(y[e], x[e], 2);
                if (y[e] != 0) {
                    light(o1[i], 1);
                }
                if (y[e] == 0) {
                    P2OUT |= (BIT0 + BIT2 + BIT3 + BIT5);
                    P1OUT |= (BIT0 + BIT3 + BIT4 + BIT5);
                    delay(ab);
                }
                else {
                    delay(t3[i]);
                }
            }
            if (i == 20 && d == 1) {
                break;
            }
        }
    }
    for (i = 0;i < 12;i++) {
        y[0] = 32768 / u[i];
        x[0] = 32768 / r[i];
        y[1] = 0;
        x[1] = 0;
        for (e = 0;e < 2;e++) {
            playsong(y[e], x[e], 2);
            if (i >= 10) {
                M = 0;
            }
            else {
                M = 1;
            }
            if (y[e] != 0) {
                light(o2[i], M);
            }
            if (y[e] == 0) {
                P2OUT |= (BIT0 + BIT2 + BIT3 + BIT5);
                P1OUT |= (BIT0 + BIT3 + BIT4 + BIT5);
                delay(ab);
            }
            else {
                delay(t4[i]);
            }
        }
    }
    song();
}
void goldwind() {                                               //曲目3播放函数
    unsigned int i, p, d, e, y[2], x[2];
    for (d = 0;d < 2;d++) {
        for (i = 0;i < 20;i++) {
            if (i >= 12 && d == 1) {
                y[0] = 32768 / k1[i - 12];
            }
            else {
                y[0] = 32768 / kk[i];
            }
            y[1] = 0;
            for (e = 0;e < 2;e++) {
                playsong(y[e], x[e], 1);
                if (y[e] == 0 && (i == 2 || i == 12)) {
                    delay(gab);
                }
                else if (y[e] == 0 && (i == 0 || i == 10)) {
                    delay(gaa);
                }
                else if (y[e] == 0) {
                    delay(gab / 2);
                }
                else {
                    delay(tt[i]);
                }
            }
        }
    }
    for (d = 0;d < 2;d++) {
        for (i = 0;i < 20;i++) {
            if (i == 19 && d == 1) {
                y[0] = 32768 / l6h;
                x[0] = 32768 / m6h;
            }
            else if (i >= 12 && d == 1) {
                y[0] = 32768 / k1[i - 12];
                x[0] = 32768 / (2 * k1[i - 12]);
            }
            else {
                y[0] = 32768 / kk[i];
                x[0] = 32768 / (2 * kk[i]);
            }
            y[1] = 0;
            x[1] = 0;
            for (e = 0;e < 2;e++) {
                playsong(y[e], x[e], 2);
                if (y[e] != 0) {
                    light(p0[i], 1);
                }
                else {
                    light(0, 0);
                }
                if (y[e] == 0 && (i == 2 || i == 12)) {
                    delay(gab);
                }
                else if (y[e] == 0 && (i == 0 || i == 10)) {
                    delay(gaa);
                }
                else if (y[e] == 0) {
                    delay(gab / 2);
                }
                else {
                    delay(tt[i]);
                }
            }
        }
    }
    for (p = 0;p < 2;p++) {
        for (i = 0;i < 18;i++) {
            y[0] = 32768 / (gg[i] / 2);
            y[1] = 0;
            for (e = 0;e < 2;e++) {
                playsong(y[e], x[e], 1);
                if (y[e] != 0) {
                    light(1, 1);
                }
                else {
                    light(0, 0);
                }
                if ((i >= 3 && i <= 4) || (i >= 12 && i <= 13)) {
                    delay(aab);
                }
                else {
                    delay(aaa);
                }
            }
        }
    }
    for (d = 1;d < 3;d++) {
        for (p = 0;p < 2;p++) {
            for (i = 0;i < 18;i++) {
                y[0] = 32768 / (d * gg[i] / 2);
                x[0] = 32768 / (d * gg[i]);
                y[1] = 0;
                x[1] = 0;
                for (e = 0;e < 2;e++) {
                    playsong(y[e], x[e], 2);
                    if (y[e] != 0 && d == 1) {
                        light(2, 1);
                    }
                    else if (y[e] != 0 && d == 2) {
                        light(3, 1);
                    }
                    else {
                        light(0, 0);
                    }
                    if (d == 2 && p == 1 && i == 13 && y[e] != 0) {
                        delay(gf);
                    }
                    else if ((i >= 3 && i <= 4) || (i >= 12 && i <= 13)) {
                        delay(aab);
                    }
                    else {
                        delay(aaa);
                    }
                }
                if (d == 2 && p == 1 && i == 13) {
                    break;
                }
            }

        }
    }
    for (i = 0;i < 25;i++) {
        y[0] = 32768 / (k2[i] / 2);
        x[0] = 32768 / (k3[i] / 2);
        y[1] = 0;
        x[1] = 0;
        for (e = 0;e < 2;e++) {
            playsong(y[e], x[e], 2);
            if (y[e] != 0) {
                light(p1[i], 1);
            }
            else {
                light(0, 0);
            }
            if (y[e] != 0) {
                delay(tt2[i]);
            }
            else if (i == 27 && y[e] == 0) {
                delay(ga);
            }
            else {
                delay(gab / 2);
            }
        }

    }
    for (p = 0;p < 4;p++) {
        for (i = 0;i < 12;i++) {
            if (p == 1 && (i == 7 || i == 8)) {
                if (i == 7) {
                    y[0] = 32768 / h2l;
                    x[0] = 32768 / h2l;
                }
                else {
                    y[0] = 32768 / h2;
                    x[0] = 32768 / h2;
                }
                y[1] = 0;
                x[1] = 0;
            }
            else {
                y[0] = 32768 / (k4[i]);
                x[0] = 32768 / (k5[i]);
                y[1] = 0;
                x[1] = 0;
            }
            for (e = 0;e < 2;e++) {
                playsong(y[e], x[e], 2);
                if (y[e] != 0) {
                    light(p2[i], 1);
                }
                else {
                    light(0, 0);
                }
                if (y[e] != 0) {
                    delay(tt3[i]);
                }
                else {
                    delay(gab / 2);
                }
            }
            if (p == 3 && i == 2) {
                break;
            }
        }
    }
    for (i = 0;i < 19;i++) {


        y[0] = 32768 / (k6[i]);
        x[0] = 32768 / (k6[i]);
        y[1] = 0;
        x[1] = 0;

        for (e = 0;e < 2;e++) {
            playsong(y[e], x[e], 2);
            if (y[e] != 0) {
                light(p3[i], 1);
            }
            else {
                light(0, 0);
            }

            if ((i == 11 || i == 13 || i == 15 || i == 17) && y[e] != 0) {
                delay(gaa);
            }
            else if (y[e] != 0) {
                delay(aaa);
            }
            else {
                delay(gab / 2);
            }
        }
    }
    for (d = 0;d < 2;d++) {
        for (i = 0;i < 20;i++) {
            if (i == 19 && d == 1) {
                y[0] = 32768 / l6h;
                x[0] = 32768 / (2 * l6h);
            }
            else if (i >= 12 && d == 1) {
                y[0] = 32768 / (k1[i - 12] / 2);
                x[0] = 32768 / k1[i - 12];
            }
            else {
                y[0] = 32768 / (kk[i] / 2);
                x[0] = 32768 / kk[i];
            }
            y[1] = 0;
            x[1] = 0;
            for (e = 0;e < 2;e++) {
                playsong(y[e], x[e], 2);
                if (y[e] != 0) {
                    light(p0[i], 1);
                }
                else {
                    light(0, 0);
                }
                if (y[e] == 0 && (i == 2 || i == 12)) {
                    delay(gab);
                }
                else if (y[e] == 0 && (i == 0 || i == 10)) {
                    delay(gaa);
                }
                else if (y[e] == 0) {
                    delay(gab / 2);
                }
                else {
                    delay(tt[i]);
                }
            }
        }
    }
    y[0] = 32768 / l7;
    x[0] = 32768 / m7;
    y[1] = 0;
    x[1] = 0;
    for (e = 0;e < 2;e++) {
        playsong(y[e], x[e], 2);
        if (y[e] != 0) {
            light(3, 1);
        }
        else {
            light(0, 0);
        }
        if (y[e] == 0) {
            delay(gab);
        }
        else {
            delay(200);
        }
    }
    song();
};
void brightdays() {                      //曲目3播放函数
    unsigned int i, e, y[2],x[2];
    for (i = 0;i < 21;i++) {
        y[0] = 32768 / (v1[i]);
        y[1] = 0;
        for (e = 0;e < 2;e++) {
            x[e]=2*y[e];
            playsong(y[e], x[e], 2);
            if (y[e] == 0) {
                light(0,0);
                delay1(ab);
            }
            else {
                light(o5[i],1);
                delay1(vt[i]);
            }
        }
    }
    for (i = 0;i < 34;i++) {
        y[0] = 32768 / (v2[i]);
        y[1] = 0;
        for (e = 0;e < 2;e++) {
            x[e]=2*y[e];
            playsong(y[e], x[e], 2);
            if (y[e] == 0) {
                light(0,0);
                delay1(ab);
            }
            else {
                light(o6[i],1);
                delay1(vt2[i]);
            }
        }
    }
    for (i = 0;i < 53;i++) {
        y[0] = 32768 / (v3[i]);
        y[1] = 0;
        for (e = 0;e < 2;e++) {
            x[e]=2*y[e];
            playsong(y[e], x[e], 2);
            if (y[e] == 0) {
                light(0,0);
                delay1(ab);
            }
            else {
                light(o7[i],1);
                delay1(vt3[i]);
            }
        }
    }
    song();
}
void light(unsigned int i, unsigned int j) {                  //控制LED输出函数
    if (j == 0) {                                                         //加入上拉电阻让LED变暗
        P1REN = (BIT0 + BIT3 + BIT4 + BIT5);
        P2REN = (BIT0 + BIT2 + BIT3 + BIT5);
    }
    else if (j == 1) {                                                 //取消上拉电阻
        P2REN = 0x00;
        P1REN = 0x00;
    }
    if (i == 1) {                                                       //输出L4、L5
        P1OUT &= ~(BIT3 + BIT4);
    }
    else if (i == 2) {
        P1OUT &= ~(BIT3 + BIT4 + BIT5);                //输出L3、L4、L5、L6
        P2OUT &= ~(BIT2);
    }
    else if (i == 3) {
        P1OUT &= ~(BIT0 + BIT3 + BIT4 + BIT5);     //输出全部LED
        P2OUT &= ~(BIT0 + BIT2 + BIT3 + BIT5);
    }
    else if (i == 0) {
        P1OUT |= (BIT0 + BIT3 + BIT4 + BIT5);         //熄灭所有LED
        P2OUT |= (BIT0 + BIT2 + BIT3 + BIT5);
    }
    else if (i == 4) {                                                //输出L1、L8
        P1OUT &= ~BIT0;
        P2OUT &= ~BIT5;
    }
    else if (i == 5) {                                              //输出L1、L2、L7、L8
        P1OUT &= ~BIT0;
        P2OUT &= ~(BIT0 + BIT5 + BIT3);
    }
}
#pragma vector=USCIAB0RX_VECTOR             //中断函数
__interrupt void UCA0RX_ISR()
{
    while ((IFG2 & UCA0RXIFG) == 0);
    buffer[0] = UCA0RXBUF;
    if (buffer[0] == 's')
    {   playsong(0,0,2);                          //蜂鸣器输出空波
        light(0,0);                                   //熄灭所有LED            
        song();                                      //进入播放函数
    }
    else if (buffer[0] == 'p')
    {   playsong(0,0,2);                         //蜂鸣器输出空波
        light(0,0);                                  //熄灭所有LED
        piano();                                    //进入弹奏函数
    }
}

